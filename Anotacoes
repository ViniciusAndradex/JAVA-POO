Nomes das Variáveis: 
Não pode começar com um dígito, usar letra, Não pode ter espaço; 
nenhum acento e por padrão usamos CamelCase com a primeira letra minúscula.

Preocessamento :
Atribuição: '=' recebe.

Boa prática: quando declarar uma var do tipo double sempre declarar com .0 no final 
e no caso de um float declarar com 8'f'

Casting: int a, b;
		 double res = (double) a / b;

Entrada de dados:
Scanner: next() = String
		 OBS: Os dados da forma que estão só leram até uma palavra
		 nextInt() = Inteiro
		 nextDouble() = Double
		 next().charAt(0) = ler o primeiro caractere de uma possível String
		 DICA: ctrl + shift + f identa o código.
Cuidado com a localidade da Máquina (. ou ,).

Entrada Para Strings com separação;
	nextLine() = Strings com mais de uma palavra.
	OBS: Se antes de realizar a leitura desse dado for feita uma leitura anteriores, é importante lembrar que ao dar o enter
		o nextLine() irá consumir o espaço como se fosse uma String e portanto o código ficará errado.
		
		
Expressoões comparativas.
Expressoões lógicos: && / || / !

Estruturas Condicionais: 
if (<condição>) { <comandos>}
else if (<condiçao>) {<comandos>}
else {<comandos>}
Existe a possibilidade de encadear as estruturas aninhando as mesmas (não gosto).
OBS: Se só houver 1 componente pode por o if sem as chaves.

Atribuição cumulativa:  += | -= | *= | %= | /= 

Switch-Case: 
switch (<expressão>) {
case (condição):
	bloco
	break;
default:
	bloco
	break;
}

Condicional Ternária [não gosto]:
( condição ) ? valor_se_verdadeiro : valor_se_falso

Escopo e Inicialização: Em java a var só pode ser utilizada se inicializada (se não for inicializadao código não compila.).
Escopo : o local onde for declarada a variável indica a sua utilização, por tanto é importante saber onde declarar e como declarar, tendo em vista que a var sempre tem que ser inicializada é importante que observe todo o contexto de estruturas para que seja possível uma compilação.

OBS: ctrl+shift+f, autoidenta o cod.
Debug: marcar breakpoint - inicializar - f6 para rodar passo a passo - entre outros

While: 
while (<condição>) {
        <bloco>       
}
